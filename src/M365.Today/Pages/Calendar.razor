@page "/calendar"
@using M365.Today.Services;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.Graph
@using TimeZoneConverter

@attribute [Authorize]

@inject M365.Today.Services.GraphClientFactory clientFactory

<AuthorizeView>
    <Authorized>
        <h1 class="mb-3">Calendar</h1>
        <a href="/newevent" class="btn btn-light btn-sm mb-3">New event</a>
        <table class="table">
            <thead>
                <tr>
                    <th>Organizer</th>
                    <th>Subject</th>
                    <th>Start</th>
                    <th>End</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var calendarEvent in events)
                {
                    <tr>
                        <td>@calendarEvent.Organizer.EmailAddress.Name</td>
                        <td>@calendarEvent.Subject</td>
                        <td>@FormatIso8601DateTime(calendarEvent.Start.DateTime)</td>
                        <td>@FormatIso8601DateTime(calendarEvent.End.DateTime)</td>
                    </tr>
                }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private IList<Event> events = new List<Event>();
    private string? dateTimeFormat;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(new Error
            {
                Message = "Unable to access authentication state"
            });
        }

        // Get the user
        var user = (await authenticationStateTask).User;
        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        // Calculate the start and end of the current week in user's time zone
        var startOfWeek = GetUtcStartOfWeekInTimeZone(DateTime.Today, graphTimeZone);
        var endOfWeek = startOfWeek.AddDays(7);

        graphClient = clientFactory.GetAuthenticatedClient();

        var mail = await graphClient.Me.Messages.Request().GetAsync();
        var eve1 = await graphClient.Me.Calendar.Request().GetAsync();

        // Specifies the start and end of the view on the calendar
        // Translates to: ?startDateTime=""&endDateTime=""
        //var viewOptions = new List<QueryOption>
        //{
        //    new QueryOption("startDateTime", startOfWeek.ToString("o")),
        //    new QueryOption("endDateTime", endOfWeek.ToString("o"))
        //};        
        var viewOptions = new List<QueryOption>
        {
            new QueryOption("startDateTime", "2023-03-06T20:22:59.067Z"),
            new QueryOption("endDateTime", "2023-03-13T20:22:59.067Z")
        };

        var a = await graphClient.Me.CalendarView.Request(viewOptions).GetAsync();

        //var result = await graphClient.Me.Calendar.CalendarView.Request().GetAsync(;

        //var eventPage = await graphClient.Me
        //    .CalendarView
        //    .Request(viewOptions)
        //    // Send user time zone in request so date/time in
        //    // response will be in preferred time zone
        //    //.Header("Prefer", $"outlook.timezone=\"{graphTimeZone}\"")
        //    // Get max 50 per request
        //    .Top(50)
        //    // Only return fields app will use
        //    .Select(e => new
        //    {
        //        e.Subject,
        //        e.Organizer,
        //        e.Start,
        //        e.End
        //    })
        //    // Order results chronologically
        //    .OrderBy("start/dateTime")
        //    .GetAsync();

        //events = eventPage.CurrentPage;
    }

    private DateTime GetUtcStartOfWeekInTimeZone(DateTime today, string timeZoneId)
    {
        // Time zone returned by Graph could be Windows or IANA style
        // TimeZoneConverter can take either
        TimeZoneInfo userTimeZone = TZConvert.GetTimeZoneInfo(timeZoneId);

        // Assumes Sunday as first day of week
        int diff = System.DayOfWeek.Sunday - today.DayOfWeek;

        // create date as unspecified kind
        var unspecifiedStart = DateTime.SpecifyKind(today.AddDays(diff), DateTimeKind.Unspecified);

        // convert to UTC
        return TimeZoneInfo.ConvertTimeToUtc(unspecifiedStart, userTimeZone);
    }

    private string FormatIso8601DateTime(string iso8601DateTime)
    {
        // Load into a DateTime
        var dateTime = DateTime.Parse(iso8601DateTime);

        if (!string.IsNullOrWhiteSpace(dateTimeFormat))
        {
            // Format it using the user's settings
            return dateTime.ToString(dateTimeFormat);
        }

        // Fallback to return original value
        return iso8601DateTime;
    }
}