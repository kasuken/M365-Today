@using M365.Today.Services;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.Graph
@using TimeZoneConverter

@using Microsoft.Fast.Components.FluentUI

@inject M365.Today.Services.GraphClientFactory clientFactory

@if (isLoading)
{
    <FluentProgressRing></FluentProgressRing>
}
else
{
    <FluentCard>
        <div class="contents">
            <div data-is-scrollable="true" style="height:500px;overflow-y:auto;">
                <FluentDataGrid RowsData="@messages">
                    <PropertyColumn Property="@(p => p.Subject)" Title="Title" />
                    <PropertyColumn Property="@(p => p.Sender.EmailAddress.Name)" Title="Sender" />
                    <PropertyColumn Property="@(p => p.ReceivedDateTime.Value.LocalDateTime)" Title="Received" />
                </FluentDataGrid>
            </div>
        </div>
    </FluentCard>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private GraphServiceClient? graphClient;
    private IQueryable<Message> messages;
    private string? dateTimeFormat;

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(new Error
                {
                    Message = "Unable to access authentication state"
                });
        }

        graphClient = clientFactory.GetAuthenticatedClient();

        var listMessages = await graphClient.Me.Messages.Request().OrderBy("receivedDateTime desc").GetAsync();

        messages = listMessages.CurrentPage.ToList().AsQueryable();

        isLoading = false;
    }
}